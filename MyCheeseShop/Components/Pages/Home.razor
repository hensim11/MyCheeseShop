@page "/"
@inject CheeseProvider CheeseProvider
@inject NavigationManager NavigationManager
@using MyCheeseShop.Context
@using MyCheeseShop.Model;

<div class="card" style="width: 18rem;">
    <img src="..." class="card-img-top" alt="...">
    <div class="card-body">
        <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
    </div>
</div>




@if (cheeses is null)
{
    <p>Loading.....</p>
}
else if (!cheeses.Any())
{
    <p> No cheeses found</p>
}



<input type="text" class="form-control" placeholder="Search for cheese....." @bind="searchTerm" @bind:event="oninput" />


@foreach (var cheese in FilteredCheeses)
{
    <div class="col">
        <StoreItem Cheese="cheese" />
    </div>
}
@if (!FilteredCheeses.Any())
{
    <p>No cheeses found</p>
}



@code {
    private IEnumerable<Cheese> cheeses;
    private string searchTerm = "";

    private IEnumerable<Cheese> filteredCheeses;
    private IEnumerable<Cheese> FilteredCheeses
    {
        get
        {
            return filteredCheeses.Where(GetSearchCriteria);
        }
        set
        {
            filteredCheeses = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        cheeses = await CheeseProvider.GetAllCheesesAsync();
        filteredCheeses = cheeses;
        ShoppingCart.OnCartUpdated += StateHasChanged;
    }


    private bool GetSearchCriteria(Cheese cheese)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return true;

        return cheese.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || cheese.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || cheese.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || cheese.Strength.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }   
}
